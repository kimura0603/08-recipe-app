generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/types"
  fileName     = "db.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String    @db.VarChar(255)
  userType  UserType  @default(chef)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  userChef  UserChef?
  recipes   Recipe[]
}

enum UserType {
  user
  chef
}

model UserChef {
  id            Int           @id @default(autoincrement())
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @unique
  profileImgSrc String        @db.Text
  profileText   String        @db.Text
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userChefLink  UserChefLink?
}

enum UserChefLinkCategory {
  TWITTER   @map("twitter")
  FACEBOOK  @map("facebook")
  INSTAGRAM @map("instagram")
  TIKTOK    @map("tiktok")
  YOUTUBE   @map("youtube")
  OTHER     @map("other")
}

model UserChefLink {
  id         Int                  @id @default(autoincrement())
  userChef   UserChef             @relation(fields: [userChefId], references: [id])
  userChefId Int                  @unique
  category   UserChefLinkCategory @default(OTHER)
  url        String               @db.VarChar(255)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  deletedAt  DateTime?
}

model Recipe {
  id                String             @id @default(cuid())
  user              User               @relation(fields: [userId], references: [id])
  userId            String
  name              String             @db.VarChar(255)
  description       String             @db.Text
  isPublic          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  recipeIngredients RecipeIngredient[]
}

model RecipeIngredient {
  id        String    @id @default(cuid())
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  recipeId  String
  remarks   String    @db.Text
  isPublic  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
